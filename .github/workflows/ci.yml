name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  FOUNDRY_PROFILE: ci

jobs:
  # ============== SMART CONTRACT JOBS ==============

  contracts-lint:
    name: üîç Lint Smart Contracts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Check Solidity formatting
        working-directory: ./contracts
        run: forge fmt --check

      - name: Run Slither analysis
        uses: crytic/slither-action@v0.3.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          slither-config: contracts/slither.config.json
          slither-args: contracts/src/
          fail-on: high
          ignore-compile: true

  contracts-test:
    name: üß™ Test Smart Contracts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Build contracts
        working-directory: ./contracts
        run: forge build

      - name: Run contract tests
        working-directory: ./contracts
        run: forge test -vv

      - name: Generate coverage report
        working-directory: ./contracts
        run: forge coverage --report lcov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./contracts/lcov.info
          flags: smart-contracts

  contracts-gas-report:
    name: ‚õΩ Generate Gas Report
    runs-on: ubuntu-latest
    needs: contracts-test
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Generate gas report
        working-directory: ./contracts
        run: |
          forge test --gas-report > gas-report.txt

      - name: Comment PR with gas report
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const gasReport = fs.readFileSync('./contracts/gas-report.txt', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ‚õΩ Gas Report\n\n\`\`\`\n${gasReport}\n\`\`\``
            });

  # ============== FRONTEND JOBS ==============

  frontend-lint:
    name: üîç Lint Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint

      - name: Run Prettier check
        working-directory: ./frontend
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"

      - name: TypeScript check
        working-directory: ./frontend
        run: npm run type-check

  frontend-test:
    name: üß™ Test Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run unit tests
        working-directory: ./frontend
        run: npm run test -- --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend

  frontend-build:
    name: üî® Build Frontend
    runs-on: ubuntu-latest
    needs: [frontend-lint, frontend-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build application
        working-directory: ./frontend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next/
          retention-days: 7

  # ============== E2E TESTING ==============

  e2e-tests:
    name: üé≠ E2E Tests
    runs-on: ubuntu-latest
    needs: [contracts-test, frontend-build]
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps

      - name: Start Anvil
        working-directory: ./contracts
        run: |
          anvil --fork-url ${{ secrets.MAINNET_RPC_URL }} --port 8545 &
          sleep 5

      - name: Deploy contracts to local network
        working-directory: ./contracts
        run: forge script script/Deploy.s.sol --broadcast --rpc-url http://localhost:8545

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next/

      - name: Start frontend
        working-directory: ./frontend
        run: |
          npm run start &
          sleep 10

      - name: Run E2E tests
        working-directory: ./frontend
        run: npm run test:e2e
        env:
          NEXT_PUBLIC_ENVIRONMENT: test
          NEXT_PUBLIC_RPC_URL: http://localhost:8545

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: |
            frontend/test-results/
            frontend/playwright-report/
          retention-days: 7

  # ============== SECURITY SCANNING ==============

  security-scan:
    name: üõ°Ô∏è Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Run npm audit (Frontend)
        working-directory: ./frontend
        run: |
          npm ci
          npm audit --audit-level high

      - name: Run Mythril analysis (Contracts)
        working-directory: ./contracts
        run: |
          pip install mythril
          myth analyze src/TokenFactory.sol --solv 0.8.21 || true

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, solidity

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ============== DEPLOYMENT JOBS ==============

  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [contracts-test, frontend-build, e2e-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Deploy contracts to testnet
        working-directory: ./contracts
        env:
          PRIVATE_KEY: ${{ secrets.STAGING_PRIVATE_KEY }}
          SEPOLIA_RPC_URL: ${{ secrets.SEPOLIA_RPC_URL }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        run: |
          forge script script/Deploy.s.sol --broadcast --rpc-url $SEPOLIA_RPC_URL --verify

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next/

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: --prod
          working-directory: ./frontend
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}

  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [contracts-test, frontend-build, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Deploy contracts to mainnet
        working-directory: ./contracts
        env:
          PRIVATE_KEY: ${{ secrets.MAINNET_PRIVATE_KEY }}
          MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        run: |
          forge script script/Deploy.s.sol --broadcast --rpc-url $MAINNET_RPC_URL --verify

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next/

      - name: Deploy to production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: --prod
          working-directory: ./frontend
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## üöÄ Release Notes

            ### Smart Contracts
            - Deployed to Ethereum Mainnet
            - Gas optimizations applied
            - Security audit passed

            ### Frontend
            - New features and improvements
            - Performance optimizations
            - Bug fixes and stability improvements

            ### Testing
            - All tests passing
            - E2E tests validated
            - Security scans completed

            **Deployment**: Production environment
            **Commit**: ${{ github.sha }}
          draft: false
          prerelease: false

  # ============== NOTIFICATION JOB ==============

  notify-completion:
    name: üì¢ Notify Completion
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify success
        if: ${{ success() }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "‚úÖ Token Factory deployment successful!"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify failure
        if: ${{ failure() }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "‚ùå Token Factory deployment failed!"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}