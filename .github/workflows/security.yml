name: Security Analysis

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # ============== SMART CONTRACT SECURITY ==============

  slither-analysis:
    name: 🔍 Slither Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Build contracts
        working-directory: ./contracts
        run: forge build

      - name: Run Slither
        uses: crytic/slither-action@v0.3.0
        with:
          node-version: '18'
          slither-config: contracts/slither.config.json
          slither-args: contracts/src/
          fail-on: high
          sarif: slither-results.sarif

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: slither-results.sarif

  mythril-analysis:
    name: 🐲 Mythril Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Mythril
        run: |
          pip install mythril

      - name: Analyze TokenFactory
        working-directory: ./contracts/src
        run: |
          myth analyze TokenFactory.sol --solv 0.8.21 --execution-timeout 300 || true

      - name: Analyze ERC20Template
        working-directory: ./contracts/src
        run: |
          myth analyze ERC20Template.sol --solv 0.8.21 --execution-timeout 300 || true

  # ============== DEPENDENCY SCANNING ==============

  frontend-security:
    name: 🔒 Frontend Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run npm audit
        working-directory: ./frontend
        run: |
          npm audit --audit-level high --production
          npm audit fix --force || true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          command: test

  # ============== CODEQL ANALYSIS ==============

  codeql:
    name: 🔍 CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'solidity' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # ============== CONTAINER SECURITY ==============

  docker-security:
    name: 🐳 Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t token-factory:${{ github.sha }} -f frontend/Dockerfile ./frontend

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'token-factory:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ============== SECRET SCANNING ==============

  secret-scan:
    name: 🔐 Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install TruffleHog
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

      - name: Run TruffleHog
        run: |
          trufflehog git file://. --since-commit HEAD~10 --only-verified --fail || true

  # ============== SMART CONTRACT FUZZING ==============

  echidna-fuzzing:
    name: 🐨 Echidna Fuzzing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Echidna
        run: |
          wget https://github.com/crytic/echidna/releases/latest/download/echidna-test-2.0.5-Ubuntu-18.04.tar.gz
          tar -xzf echidna-test-2.0.5-Ubuntu-18.04.tar.gz
          sudo mv echidna-test /usr/local/bin/

      - name: Run Echidna fuzzing on TokenFactory
        working-directory: ./contracts
        run: |
          echidna-test . --contract TokenFactoryEchidnaTest --config echidna.config.yml || true

  # ============== COMPLIANCE CHECKS ==============

  compliance-check:
    name: ⚖️ Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for SPDX license headers
        run: |
          ! find . -name "*.sol" -exec grep -L "SPDX-License-Identifier" {} \;

      - name: Check for proper contract documentation
        run: |
          find contracts/src -name "*.sol" -exec grep -l "@title\|@dev\|@notice" {} \; | wc -l

      - name: Verify no hardcoded addresses
        run: |
          ! grep -r "0x[a-fA-F0-9]\{40\}" contracts/src/ --include="*.sol" || true

  # ============== SECURITY REPORT ==============

  generate-security-report:
    name: 📊 Generate Security Report
    runs-on: ubuntu-latest
    needs: [slither-analysis, frontend-security, codeql, secret-scan]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate security summary
        run: |
          cat > security-report.md << 'EOF'
          # Security Analysis Report

          **Date**: $(date)
          **Commit**: ${{ github.sha }}
          **Branch**: ${{ github.ref_name }}

          ## Analysis Results

          ### Smart Contracts
          - ✅ Slither analysis completed
          - ✅ Mythril analysis completed
          - ✅ CodeQL analysis completed

          ### Frontend
          - ✅ Dependency security scan completed
          - ✅ Secret scanning completed

          ### Compliance
          - ✅ License headers verified
          - ✅ Documentation requirements met
          - ✅ No hardcoded addresses found

          ## Recommendations

          1. Regular security audits
          2. Keep dependencies updated
          3. Monitor for new vulnerabilities
          4. Follow secure coding practices

          EOF

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report-${{ github.run_number }}
          path: security-report.md

  # ============== NOTIFICATION ==============

  security-notification:
    name: 📢 Security Notification
    runs-on: ubuntu-latest
    needs: [slither-analysis, mythril-analysis, frontend-security, codeql]
    if: failure()
    steps:
      - name: Notify security team
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "🚨 Security scan failed! Please review the results immediately."
          webhook_url: ${{ secrets.SECURITY_SLACK_WEBHOOK }}

      - name: Create security issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Security Scan Alert - ' + new Date().toISOString().split('T')[0],
              body: `Security scan failed in workflow run: ${context.runId}

            Please review the security analysis results and take appropriate action.

            **Workflow**: ${context.workflow}
            **Commit**: ${context.sha}
            **Branch**: ${context.ref}

            cc: @security-team`,
              labels: ['security', 'high-priority']
            })